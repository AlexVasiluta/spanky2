syntax = "proto3";

package spanky;

service Spanky {
    // When a client connects it exposes methods that the server can call
    rpc NewPluginManager(NewPM) returns (AckPM) {}

    // Set or update the command list for a plugin manager
    rpc SetCommandList(ReqCmdList) returns (RespCmdList) {}

	// Send message to specified channel
	rpc SendMessage(OutgoingMessage) returns (SomeObjectID) {}

    // Interface that streams events
    rpc GetEvent(GetEventReq) returns (stream Event) {}

    // Get server list
    rpc GetServers(AckPM) returns (RespServers) {}
}

// New plugin manager request
message NewPM {
    string PluginMgrName = 1;
}

// New plugin manager response
message AckPM {
    string PluginMgrID = 1;
}

// What commands this plugin manager implements
message ReqCmdList {
    string PluginMgrID = 1;
    repeated string CmdRequestList = 2;
}

// What commands the server accepts
message RespCmdList {
    repeated string CmdResponseList = 1;
}

// Message to send
message OutgoingMessage {
	uint64 channel_id = 1;
	string text = 2;
}

// Anonymous object that has an ID
message SomeObjectID {
	uint64 id = 1;
}

// When a plugin manager wants to receive events
message GetEventReq {
    string PluginMgrID = 1;
    int64 EventList = 2; // List of events to receive
}

message Event {
    enum EventType {
        // Chat events
        message         = 0;
        message_edit    = 1;
        message_del     = 2;

        join            = 3;
        part            = 4;

        chan_del        = 5;
        chan_add        = 6;
        chan_upd        = 7;

        member_ban      = 8;
        member_unban    = 9;
        member_update   = 10;

        reaction_add    = 11;
        reaction_remove = 12;

        msg_bulk_del    = 13;

        // Bot events
        on_ready        = 20;
    }
    EventType event_type = 1;

    oneof payload {
        Message msg = 2;
        EmptyEvent empty = 3;
    }
    // Reaction react = 3;
    // User user = 4;
    // Channel chan = 5;
}

///
/// Discord objects
///
message User {
    string name = 1;
    string display_name = 2;
    uint64 id = 3;
}

message Channel {
    string name = 1;
    uint64 id = 2;
}

message Server {
    uint64 id = 1;
    string name = 2;
}

message RespServers {
    repeated Server slist = 1;
}

message Message {
    string content = 1;
    uint64 id = 2;
    User author = 3;
    uint64 channel_id = 4;
    uint64 server_id = 5;
}

message MessageEdit {
    Message before = 1;
    Message after = 2;
}

message EmptyEvent {

}