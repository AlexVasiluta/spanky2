# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rpc import spanky_pb2 as rpc_dot_spanky__pb2


class SpankyStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewPluginManager = channel.unary_unary(
                '/spanky.Spanky/NewPluginManager',
                request_serializer=rpc_dot_spanky__pb2.NewPM.SerializeToString,
                response_deserializer=rpc_dot_spanky__pb2.AckPM.FromString,
                )
        self.SetCommandList = channel.unary_unary(
                '/spanky.Spanky/SetCommandList',
                request_serializer=rpc_dot_spanky__pb2.ReqCmdList.SerializeToString,
                response_deserializer=rpc_dot_spanky__pb2.RespCmdList.FromString,
                )
        self.HandleEvents = channel.unary_stream(
                '/spanky.Spanky/HandleEvents',
                request_serializer=rpc_dot_spanky__pb2.HandleEventsReq.SerializeToString,
                response_deserializer=rpc_dot_spanky__pb2.Event.FromString,
                )


class SpankyServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NewPluginManager(self, request, context):
        """When a client connects it exposes methods that the server can call
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCommandList(self, request, context):
        """Set or update the command list for a plugin manager
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HandleEvents(self, request, context):
        """Connect to the server and get stream of things to do
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpankyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewPluginManager': grpc.unary_unary_rpc_method_handler(
                    servicer.NewPluginManager,
                    request_deserializer=rpc_dot_spanky__pb2.NewPM.FromString,
                    response_serializer=rpc_dot_spanky__pb2.AckPM.SerializeToString,
            ),
            'SetCommandList': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCommandList,
                    request_deserializer=rpc_dot_spanky__pb2.ReqCmdList.FromString,
                    response_serializer=rpc_dot_spanky__pb2.RespCmdList.SerializeToString,
            ),
            'HandleEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.HandleEvents,
                    request_deserializer=rpc_dot_spanky__pb2.HandleEventsReq.FromString,
                    response_serializer=rpc_dot_spanky__pb2.Event.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'spanky.Spanky', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Spanky(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NewPluginManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spanky.Spanky/NewPluginManager',
            rpc_dot_spanky__pb2.NewPM.SerializeToString,
            rpc_dot_spanky__pb2.AckPM.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCommandList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spanky.Spanky/SetCommandList',
            rpc_dot_spanky__pb2.ReqCmdList.SerializeToString,
            rpc_dot_spanky__pb2.RespCmdList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HandleEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/spanky.Spanky/HandleEvents',
            rpc_dot_spanky__pb2.HandleEventsReq.SerializeToString,
            rpc_dot_spanky__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
