syntax = "proto3";

package spanky;

service Spanky {
    // When a client connects it exposes methods that the server can call
    rpc NewPluginManager(NewPM) returns (AckPM) {}

    // Set or update the command list for a plugin manager
    rpc SetCommandList(ReqCmdList) returns (RespCmdList) {}

	// Send message to specified channel
    rpc SendMessage(OutgoingThing) returns (SomeObjectID) {}

    // Interface that streams events
    rpc GetEvent(GetEventReq) returns (stream Event) {}

    // Get server list
    rpc GetServerIDs(Empty) returns (ObjectIDList) {}

    // Get server data
    rpc GetServer(SomeObjectID) returns (Server) {}

    // Get users in a server
    rpc GetUsers(SomeObjectID) returns (UserList) {}

    // Get users in a server
    rpc GetUser(UserRequest) returns (User) {}


    // Get role from a server
    rpc GetRole(RoleRequest) returns (Role) {}

    // Add role to a user
    rpc AddRoles(RoleAddRem) returns (Empty) {}

    // Remove a role
    rpc RemoveRoles(RoleAddRem) returns (Empty) {}


    // Get attachments for a message
    rpc GetAttachments(MessageRequest) returns (Attachments) {}

    // Send a private message
    rpc SendPM(OutgoingPM) returns (SomeObjectID) {}

    // Get channel by ID
    rpc GetChannel(ChannelRequest) returns (Channel) {}

    // Delete a message
    rpc DeleteMessage(MessageRequest) returns (Empty) {}
}

message Attachments {
    repeated string urls = 1;
}

message ChannelRequest {
    uint64 channel_id = 1;
    uint64 channel_name = 2;
    uint64 server_id = 3;
}

message MessageRequest {
    uint64 message_id = 1;
    uint64 channel_id = 2;
    uint64 server_id = 3;
}

message RoleRequest {
    uint64 server_id = 1;
    oneof info {
        uint64 role_id = 2;
        string role_name = 3;
    }
}

message RoleAddRem {
    uint64 server_id = 1;
    uint64 user_id = 2;
    repeated uint64 roleid_list = 3;
}

message UserRequest {
    uint64 user_id = 1;
    string user_name = 2;
    uint64 server_id = 3;
}

message Empty {

}

message Result {
    bool success = 1;
}

// Server user list
message UserList {
    repeated User user_list = 1;
}

// New plugin manager request
message NewPM {
    string PluginMgrName = 1;
}

// New plugin manager response
message AckPM {
    string PluginMgrID = 1;
}

// What commands this plugin manager implements
message ReqCmdList {
    string PluginMgrID = 1;
    repeated string CmdRequestList = 2;
}

// What commands the server accepts
message RespCmdList {
    repeated string CmdResponseList = 1;
}

// Embed field
message EmbedField {
    string name = 1;
    string text = 2;
}

message OutgoingPM {
    uint64 user_id = 1;
    OutgoingMessage msg = 2;
}

// Thing to send
message OutgoingThing {
    uint64 source_msg_id = 1;
    uint64 channel_id = 2;
    uint64 server_id = 3;

    oneof payload {
        OutgoingMessage msg = 4;
        OutgoingEmbed embed = 5;
        OutgoingFile file = 6;
    }
}

// Message to send
message OutgoingMessage {
    string text = 1;
}

// Embed to send
message OutgoingEmbed {
    string title = 1;
    string description = 2;
    repeated EmbedField fields = 3;
    bool inline_fields = 4;
    string image_url = 5;
    string footer_txt = 6;
}

// File to send
message OutgoingFile {
    bytes data = 1;
    string fname = 2;
}

// Anonymous object that has an ID
message ObjectIDList {
	repeated uint64 ids = 1;
}

// Anonymous object that has an ID
message SomeObjectID {
	uint64 id = 1;
}

// When a plugin manager wants to receive events
message GetEventReq {
    string PluginMgrID = 1;
    int64 EventList = 2; // List of events to receive
}

message Event {
    enum EventType {
        // Chat events
        message         = 0;
        message_edit    = 1;
        message_del     = 2;

        join            = 3;
        part            = 4;

        chan_del        = 5;
        chan_add        = 6;
        chan_upd        = 7;

        member_ban      = 8;
        member_unban    = 9;
        member_update   = 10;

        reaction_add    = 11;
        reaction_remove = 12;

        msg_bulk_del    = 13;

        // Bot events
        on_start        = 20;
        on_ready        = 21;
    }
    EventType event_type = 1;

    oneof payload {
        Message msg = 2;
        EmptyEvent empty = 3;
    }
    // Reaction react = 3;
    // User user = 4;
    // Channel chan = 5;
}

///
/// Discord objects
///
message Role {
    string name = 1;
    uint64 id = 2;
    uint64 server_id = 3;
    bool managed = 4;
    uint32 position = 5;
}

message User {
    string name = 1;
    string display_name = 2;
    uint64 id = 3;
    uint64 joined_at = 4;
    string avatar_url = 5;
    uint64 premium_since = 6;
    repeated uint64 role_ids = 7;
    uint64 server_id = 8;
}

message Channel {
    string name = 1;
    uint64 id = 2;
    uint64 server_id = 3;
}

message Server {
    uint64 id = 1;
    string name = 2;
    repeated uint64 role_ids = 3;
}

message Message {
    string content = 1;
    string author_name = 2;

    uint64 id = 3;
    uint64 author_id = 4;
    uint64 channel_id = 5;
    uint64 server_id = 6;
}

message MessageEdit {
    Message before = 1;
    Message after = 2;
}

message EmptyEvent {

}