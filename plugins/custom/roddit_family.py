
# Discord/Plugin things
from spanky.plugin import hook
from spanky.utils import discord_utils as dutils
import discord
from spanky.plugin.permissions import Permission

# Image/Family tree stuff
from PIL import Image
from graphviz import Digraph
import io

# Type stuff (I'm experimenting with this, it's my first time)
from typing import Dict, List, Optional, Set
from enum import IntEnum
import spanky.inputs.discord_py as dpy

# Other util stuff
import secrets

SERVER_IDS = [
    "648937029433950218", # Dev Server
    "287285563118190592" # r/ro
]
ELEVATED_PERMS = [Permission.admin, Permission.bot_owner]
PLUGIN_DATA_NAME = "plugins_custom_roddit_family.json"
PLUGIN_MAINTAINER = "195202549647671297" # CNC#9999

server_trees = {}

RelativeDict = Dict[int, Set['Person']]

node_attributes = [('shape', 'box')]
edge_attributes = [('dir', 'none')]
graph_attributes = []

no_mentions = discord.AllowedMentions.none()

class RelativeException(Exception):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.err = f"{p1.name} e o rudÄƒ a lui {p2.name}"
        super().__init__(self.err)

class OfferType(IntEnum):
    MARRY = 1
    ADOPT = 2
    CHOICE = 3

class PendingOffer:
    """
    oid: request ID type
    tp: OfferType the type
    fr: str, User ID for the person requesting
    to: str, User ID for the person being asked
    """

    def __init__(self, oid: str, tp: OfferType, fr: str, to: str):
        self.id = oid
        self.tp = tp
        self.fr = fr
        self.to = to

    def serialize(self):
        rez = {}
        rez["id"] = self.id
        rez["type"] = self.tp
        rez["from"] = self.fr
        rez["to"] = self.to
        return rez

    def __str__(self):
        return self.__repr__()

    def __repr__(self):
        return f"Request {self.id}: from <@{self.fr}> to <@{self.to}>. Type {repr(self.tp)}"

    @staticmethod
    def create(tp: OfferType, fr: str, to: str):
        oid = secrets.token_urlsafe(6)
        return PendingOffer(oid, tp, fr, to)

    @staticmethod
    def deserialize(serialized):
        return PendingOffer(serialized["id"], OfferType(serialized["type"]), serialized["from"], serialized["to"])

class Person:
    def __init__(self, uid: str, name: str, spouse="", children=[], parents=[]):
        self.id = uid
        self.name = name
        self.tree: 'ServerTree' = None
        
        self.raw_spouse = spouse
        self.raw_children = children
        self.raw_parents = parents
        self.spouse: Optional['Person'] = None
        self.children: List['Person'] = []
        self.parents: List['Person'] = []
    
    def __repr__(self):
        return self.__str__()
    def __str__(self):
        return f"Person[id: {self.id}, name: {self.name}]"
    def __eq__(self, other):
        if isinstance(other, Person):
            return self.id == other.id
        if isinstance(other, str):
            return self.id == other
        return False
    def __hash__(self):
        return hash(self.id)

    # load_info loads all other Persons from the tree
    # It also gets the tree for further modifications
    def load_info(self, tree):
        self.tree = tree
        if self.raw_spouse != "":
            try:
                self.spouse = tree.get_person(self.raw_spouse)
            except:
                pass
        for child in self.raw_children:
            try:
                p = tree.get_person(child)
                if p:
                    self.children.append(p)
            except:
                pass

        for parent in self.raw_parents:
            try:
                p = tree.get_person(parent)
                if p:
                    self.parents.append(p)
            except:
                pass

    # For someone to marry another user
    def marry(self, user_id):
        if self.is_relative(user_id):
            raise RelativeException(self, self.tree.get_person(user_id))
        offer = PendingOffer.create(OfferType.MARRY, self.id, user_id)
        self.tree.add_offer(offer)
        print("Marriage action made from %s with %s" % (self.id, user_id))
        return offer
    
    # For someone to adopt another user
    def adopt(self, user_id):
        if self.is_relative(user_id):
            raise RelativeException(self, self.tree.get_person(user_id))
        offer = PendingOffer.create(OfferType.ADOPT, self.id, user_id)
        self.tree.add_offer(offer)
        print("Adopt action made from %s with %s" % (self.id, user_id))
        return offer
    
    # complete_marriage is called by the tree to update the spouse
    def complete_marriage(self, spouse: 'Person'):
        self.spouse = spouse
        # merge existing children
        self.children = list(set(self.children + self.spouse.children))
        # Very infuriating bug
        for child in self.children:
            child.parents = [self, spouse]
        self.spouse.children = self.children.copy()
        self.sync()
    
    def complete_adoption(self, relative: 'Person', tp: str):
        if tp == "child": # relative becomes a child
            self.children.append(relative)
            if self.spouse:
                self.spouse.children.append(relative)
        else:
            self.parents.append(relative)
            if relative.spouse:
                self.parents.append(relative.spouse)
        self.sync()

    # For someone to divorce married user
    def divorce(self, from_spouse=False):
        if not from_spouse:
            self.spouse.divorce(from_spouse=True)
        self.spouse = None
        self.sync()
    
    # get_all_relatives gets all the relatives from a person in no particular order
    # this assumes that the family graph is acyclic
    def get_all_relatives(self) -> List['Person']:
        out = []
        for _, v in self.get_relative_levels().items():
            for person in v:
                out.append(person)
        return out
    
    def get_relative_levels(self) -> RelativeDict:
        levels: RelativeDict = {}
        self.fill_relative_dict(levels, 0, self.id)
        return levels

    def fill_relative_dict(self, levels: RelativeDict, curr_level: int, asker: str):
        if curr_level not in levels:
            levels[curr_level] = set()
        
        levels[curr_level].add(self)
        
        if self.spouse and self.spouse.id != asker and self.spouse not in levels[curr_level]:
            self.spouse.fill_relative_dict(levels, curr_level, self.id)
        
        for p in self.parents:
            if p.id != asker and (curr_level - 1 not in levels or p not in levels[curr_level - 1]):
                p.fill_relative_dict(levels, curr_level - 1, self.id)
        
        for c in self.children:
            if c.id != asker and (curr_level + 1 not in levels or c not in levels[curr_level + 1]):
                c.fill_relative_dict(levels, curr_level + 1, self.id)

    # This should be used so that family trees make sense
    def is_relative(self, user_id: str):
        for relative in self.get_all_relatives():
            if relative.id == user_id:
                return True
        return False

    # For parents to disown their child
    def disown(self, child_id: str) -> bool:
        if child_id not in [c.id for c in self.children]:
            return False
        for child in self.children:
            if child.id == child_id:
                child.delete_parent(self.id)
                break
        self.tree.get_person(child_id).parents = []
        self.delete_kid(child_id)
        if self.spouse:
            self.spouse.delete_kid(child_id)
        return True


    def get_marriage_cross(self):
        if not self.spouse:
            return ''
        uid = self.id
        sid = self.spouse.id
        if int(uid) > int(sid):
            uid, sid = sid, uid
        return f"{uid}x{sid}"

    def family_tree(self) -> Image.Image:
        ranks = self.get_relative_levels()
        g = Digraph(name='family', 
                    format='png',
                    edge_attr=edge_attributes,
                    graph_attr=graph_attributes,
                    node_attr=node_attributes,
                    strict=True)
        levels = self.get_relative_levels()

        lvl_ids = sorted(list(levels.keys()))
        
        for level in lvl_ids:
            people = levels[level]

            added_already = []

            cross_set = set()
            with g.subgraph() as s:
                s.attr(rank='same', rankdir='LR')
                for person in people:
                    if person.id in added_already:
                        continue
                    added_already.append(person.id)
                    # draw the person
                    if person.id == self.id:
                        s.node(person.id, label=person.name, color='blue')
                    else:
                        s.node(person.id, label=person.name)
                    
                    if not person.married:
                        for child in person.children:
                            g.edge(person.id, child.id)
                        continue

                    # draw the spouse
                    spouse = person.spouse
                    if spouse.id == self.id:
                        s.node(spouse.id, label=spouse.name, color='blue')
                    else:
                        s.node(spouse.id, label=spouse.name)
                    added_already.append(spouse.id)

                    cross = person.get_marriage_cross()
                    if cross not in cross_set:
                        cross_set.add(cross)
                        s.node(cross, label="", shape="point", width="0.001", height="0.001")
                        if person.id < spouse.id:
                            g.edge(person.id, cross)
                            g.edge(cross, spouse.id)
                        else:
                            g.edge(spouse.id, cross)
                            g.edge(cross, person.id)
                        for child in person.children:
                            g.edge(cross, child.id)
        out = g.pipe(format="png")
        return Image.open(io.BytesIO(out))

    def delete_kid(self, child_id: str):
        self.children = [child for child in self.children if child.id != child_id]
        self.sync()
    
    def delete_parent(self, parent_id: str):
        self.parents = [parent for parent in self.parents if parent.id != parent_id]
        self.sync()

    # For children to abandon their parents
    def cut_parent_ties(self):
        for parent in self.parents:
            parent.delete_kid(self.id)
        self.parents = []
        self.sync()
        pass

    @property
    def adopted(self):
        return len(self.parents) > 0

    @property
    def has_kids(self):
        return len(self.children) > 0
    
    @property
    def married(self):
        return self.spouse is not None
    
    @property
    def alone(self):
        return not (self.married or self.adopted or self.has_kids)

    # If the current person has a marriage request to someone, it returns the PendingOffer, else it returns None
    @property
    def marry_request(self):
        for offer in self.tree.offer_outbox(self.id):
            if offer.tp is OfferType.MARRY:
                return True
        return False
    
    @property
    def adopt_request(self):
        for offer in self.tree.offer_outbox(self.id):
            if offer.tp is OfferType.ADOPT:
                return True
        return False
    
    @property
    def divorced_child(self):
        for offer in self.tree.offer_inbox(self.id):
            if offer.tp is OfferType.CHOICE:
                return True
        return False

    def sync(self):
        self.tree.sync()
    
    ##### Storage stuff

    def serialize(self):
        ret = {
            "spouse": "", 
            "children": [], 
            "parents": []
        }
        
        if self.spouse:
            ret["spouse"] = self.spouse.id

        for child in self.children:
            ret["children"].append(child.id)

        for parent in self.parents:
            ret["parents"].append(parent.id)
        return ret

    @staticmethod
    def deserialize(serialized, uid, name):
        return Person(uid, name, serialized["spouse"], serialized["children"], serialized["parents"])

class ServerTree:
    """ServerTree holds a "graph" of relationships in the server"""

    def __init__(self, storage, server, people: Dict[str, Person], offers: List[PendingOffer]):
        self.storage = storage
        self.server = server
        self.people = people
        self.pending_offers = offers
        
        self.fully_load_people()
    
    def fully_load_people(self):
        for id in self.people.keys():
            self.people[id].load_info(self)
        self.sync()
    
    ##### Offer stuff

    def get_offer(self, id) -> Optional[PendingOffer]:
        for offer in self.pending_offers:
            if offer.id == id:
                return offer
        return None

    def add_offer(self, offer: PendingOffer):
        self.pending_offers.append(offer)
        self.sync()

    def remove_offer(self, offer: PendingOffer):
        self.pending_offers.remove(offer)
        self.sync()


    def outbox_by_event_type(self, user_id: str, ot: OfferType) -> List[PendingOffer]:
        offers = []
        for offer in self.offer_outbox(user_id):
            if offer.tp == ot:
                offers.append(offer)
        return offers

    def clear_with_event_type(self, user_id: str, ot: OfferType):
        self.pending_offers = [offer for offer in self.pending_offers if not (offer.fr == user_id and offer.tp == ot)]
        self.sync()

    # offer_inbox returns a list of offers
    def offer_inbox(self, user_id: str) -> List[PendingOffer]:
        offers = []
        for offer in self.pending_offers:
            if offer.to == user_id:
                offers.append(offer)
        return offers

    def offer_outbox(self, user_id: str) -> List[PendingOffer]:
        offers = []
        for offer in self.pending_offers:
            if offer.fr == user_id:
                offers.append(offer)
        return offers

    # This does stuff it should not do, but fuck it, it's already getting pretty late and I need to ship this
    # It returns the message to be sent in the channel
    def start_divorce_event(self, parent: Person) -> str:
        ch_ids = []
        for ch in parent.children:
            self.add_offer(PendingOffer.create(OfferType.CHOICE, ch.id, parent.id))
            self.add_offer(PendingOffer.create(OfferType.CHOICE, ch.id, parent.spouse.id))
            ch_ids.append(ch.id)
        # Disown all children
        for id in ch_ids:
            parent.disown(id)
        # Generate message
        msg = f"Ai divorÈ›at de <@{parent.spouse.id}>. ÃŽmi pare rÄƒu, eraÈ›i foarte frumoÈ™i Ã®mpreunÄƒ.\n"
        if len(ch_ids) == 0:
            pass
        elif len(ch_ids) == 1:
            msg += f"<@{ch_ids[0]}>, poÈ›i sÄƒ alegi cu ce pÄƒrinte ai vrea sÄƒ rÄƒmÃ¢i. RuleazÄƒ `.choose_parent <pÄƒrinte>` pentru a alege pe cineva, iar `.leave_parents` dacÄƒ nu vrei sÄƒ fii asociat cu pÄƒrinÈ›ii tÄƒi."
        else:
            mentions = ' '.join([f"<@{id}>" for id in ch_ids])
            msg += f"{mentions}, puteÈ›i sÄƒ alegeÈ›i cu ce pÄƒrinte vreÈ›i sÄƒ rÄƒmÃ¢neÈ›i. RulaÈ›i `.choose_parent <pÄƒrinte>` pentru a alege pe cineva, iar `.leave_parents` dacÄƒ nu vreÈ›i sÄƒ fiÈ›i asociaÈ›i cu pÄƒrinÈ›ii voÈ™tri."
        parent.divorce()
        self.sync()
        return msg

    ##### Person Stuff
    
    def get_person(self, uid: str) -> Person:
        person = self.people.get(uid)
        if not person:
            user = self.server.get_user(uid)
            if not user:
                raise ValueError("invalid user id")
            return self.create_person_from_user(user)
        return self.people[uid]
    
    def get_member(self, person: Person) -> dpy.User:
        return self.server.get_user(person.id)

    def create_person_from_user(self, user) -> Person:
        return self.create_person(user.id, user.name)

    def create_person(self, uid: str, name: str) -> Person:
        p = Person(uid, name)
        p.load_info(self)
        self.add_person(p)
        return p

    def add_person(self, person: Person):
        self.people[person.id] = person
        self.sync()

    # Storage stuff

    def serialize(self):
        offers = []
        for offer in self.pending_offers:
            offers.append(offer.serialize())
        
        people = {}
        for uid, person in self.people.items():
            people[uid] = person.serialize()

        return {"offers": offers, "people": people}

    def sync(self):
        data = self.serialize()
        self.storage["server_tree"] = data
        self.storage.sync()

    @staticmethod
    def deserialize(bot, storage, server) -> 'ServerTree':
        serialized = storage["server_tree"]
        raw_people = serialized["people"]
        raw_offers = serialized["offers"]
        people = {}
        offers = []
        for uid, person in raw_people.items():
            user = server.get_user(uid)
            if user is None:
                continue
            people[uid] = Person.deserialize(person, uid, user.name)
        
        for offer in raw_offers:
            offer["type"] = OfferType(offer["type"])
            off = PendingOffer.deserialize(offer)
            if off.to not in people or off.fr not in people:
                continue
            offers.append(off)

        tree = ServerTree(storage, server, people, offers)
        server_trees[str(server.id)] = tree        
        return tree

def get_server_tree(event) -> ServerTree:
    return server_trees[str(event.server.id)]

@hook.command(server_id=SERVER_IDS, format="user")
def marry(event, text):
    """<user> - IniÈ›iazÄƒ o cerere Ã®n cÄƒsÄƒtorie cu persoana menÈ›ionatÄƒ"""
    tree = get_server_tree(event)
    p = tree.get_person(event.author.id)
    text = dutils.str_to_id(text)
    if text == "":
        return "Trebuie sÄƒ specifici pe cineva"

    user = event.server.get_user(text)
    if not user:
        return "PersoanÄƒ invalidÄƒ."
    
    if p.married:
        return "EÈ™ti deja cÄƒsÄƒtorit!"
    if user.id == event.author.id:
        return "OricÃ¢t de mult ai vrea, nu te poÈ›i cÄƒsÄƒtori cu tine :("
    if p.marry_request:
        return "Ai deja o cerere de cÄƒsÄƒtorie expediatÄƒ! RuleazÄƒ .revoke_marry_request ca sÄƒ o anulezi"
    spouse = tree.get_person(user.id)
    if spouse.married:
        return "Persoana e deja luatÄƒ, nu ai ce sÄƒ-i faci."
    if spouse.id in [ch.id for ch in p.children]:
        return "Nu-È›i poÈ›i cÄƒsÄƒtori copiii."
    if spouse.id in [pr.id for pr in p.parents]:
        return "Nu-È›i poÈ›i cÄƒsÄƒtori pÄƒrinÈ›ii."
    if p.is_relative(user.id):
        return "Nu poÈ›i cÄƒsÄƒtori o rudÄƒ."


    req = p.marry(spouse.id)  
    
    user.send_pm(f"""Ai primit o cerere de cÄƒsÄƒtorie de la {event.author.name}
RÄƒspunde cu urmÄƒtoarea comandÄƒ pentru a accepta cererea:
.accept_marry {req.id}
DacÄƒ vrei sÄƒ refuzi aceastÄƒ cerere, rÄƒspunde cu urmÄƒtoarea comandÄƒ:
.deny_marry {req.id}""")

    return "Ai trimis cerere de cÄƒsÄƒtorie lui %s." % user.name

@hook.command(can_pm=True, format="id")
def accept_marry(bot, text, event, reply):
    """<id> - AcceptÄƒ o ofertÄƒ de cÄƒsÄƒtorie."""
    if text == "":
        return "Trebuie specificat ID-ul cererii!"

    for server in bot.backend.get_servers():
        if server.id not in SERVER_IDS:
            continue
        tree: ServerTree = server_trees[str(server.id)]
        offer = tree.get_offer(text)
        print(tree.pending_offers)
        if not offer: 
            continue
        if offer.to != event.author.id:
            return "Cererea nu Ã®È›i este destinatÄƒ È›ie!"
        if offer.tp != OfferType.MARRY:
            return "Asta nu-i cerere de cÄƒsÄƒtorie!"
        p1 = tree.get_person(event.author.id)
        p2 = tree.get_person(offer.fr)
        # check if person is relative, again
        if p1.is_relative(offer.fr):
            tree.remove_offer(offer)
            return "Din pÄƒcate, aÈ›i devenit rude, deci nu mai puteÈ›i face nimic"
        p1.complete_marriage(p2)
        p2.complete_marriage(p1)
        tree.remove_offer(offer)


        user = server.get_user(offer.fr)

        user.send_pm(f"{event.author.name} È›i-a acceptat cererea de cÄƒsÄƒtorie. CasÄƒ de piatrÄƒ!") 
        return "CasÄƒ de piatrÄƒ!"

    return "ID invalid"

@hook.command(can_pm=True, format="id")
def deny_marry(bot, text, event):
    """<id> - RefuzÄƒ o ofertÄƒ de cÄƒsÄƒtorie"""
    for server in bot.backend.get_servers():
        if server.id not in SERVER_IDS:
            continue

        tree = server_trees[str(server.id)]
        offer = tree.get_offer(text)
        if not offer: 
            continue
        if offer.to != event.author.id:
            return "Cererea nu Ã®È›i este destinatÄƒ È›ie!"
        if offer.tp != OfferType.MARRY:
            return "Asta nu-i cerere de cÄƒsÄƒtorie!"
        
        user = server.get_user(offer.fr)
        user.send_pm(f"{event.author.name} È›i-a refuzat cererea de cÄƒsÄƒtorie. Mai mult noroc data viitoare!") 
        return "I-am transmis veÈ™tile."
    
    return "ID invalid"

@hook.command(server_id=SERVER_IDS, format="user")
def adopt(event, text):
    """<user> - IniÈ›iazÄƒ o cerere de adopÈ›ie cu user-ul menÈ›ionat"""
    tree = get_server_tree(event)
    p = tree.get_person(event.author.id)
    text = dutils.str_to_id(text)

    if p.adopt_request:
        return "PoÈ›i adopta o singurÄƒ persoanÄƒ Ã®n orice moment! RuleazÄƒ .revoke_adopt_request pentru a anula cererea"
    
    if text == "":
        return "Trebuie sÄƒ specifici pe cineva pe care sÄƒ adoptezi"
    user = event.server.get_user(text)

    if not user:
        return "PersoanÄƒ invalidÄƒ."
    if user.id == event.author.id:
        return "OricÃ¢t de mult ai vrea, nu te poÈ›i adopta pe tine Ã®nsÄƒÈ›i. :("
    if p.spouse and p.spouse.id == user.id:
        return "Nu Ã®È›i poÈ›i adopta consortul."
    if user.id in [c.id for c in p.children]:
        return "Ai adoptat deja acea persoanÄƒ."
    if user.id in [p.id for p in p.parents]:
        return "Nu Ã®È›i poÈ›i adopta pÄƒrinÈ›ii."
    if p.is_relative(user.id):
        return "Nu poÈ›i adopta rudele."
    child = tree.get_person(user.id)
    if child.adopted:
        return "Persoana este deja adoptatÄƒ"

    req = p.adopt(child.id)  
    print(req)

    user.send_pm(f"""Ai primit o cerere de adopÈ›ie de la {event.author.name}
RÄƒspunde cu urmÄƒtoarea comandÄƒ pentru a accepta cererea:
.accept_adoption {req.id}
DacÄƒ vrei sÄƒ refuzi aceastÄƒ cerere, rÄƒspunde cu urmÄƒtoarea comandÄƒ:
.deny_adoption {req.id}""")

    return "Ai trimis cerere de adopÈ›ie lui %s." % user.name

@hook.command(can_pm=True, format="id")
def accept_adoption(bot, text, event, reply, send_message):
    """<id> - AcceptÄƒ o ofertÄƒ de adopÈ›ie"""
    for server in bot.backend.get_servers():
        if server.id not in SERVER_IDS:
            continue
        tree: ServerTree = server_trees[str(server.id)]
        offer = tree.get_offer(text)
        print(tree.pending_offers)
        if not offer: 
            continue
        if offer.to != event.author.id:
            return "Cererea nu Ã®È›i este destinatÄƒ È›ie!"
        if offer.tp != OfferType.ADOPT:
            return "Asta nu-i cerere de adopÈ›ie!"
        
        p1 = tree.get_person(offer.to)
        p2 = tree.get_person(offer.fr)
        # check if person is relative, again
        if p1.is_relative(offer.fr):
            tree.remove_offer(offer)
            return "Din pÄƒcate, aÈ›i devenit rude, deci nu mai puteÈ›i face nimic"
        p2.complete_adoption(p1, "child")
        p1.complete_adoption(p2, "parent")
        tree.clear_with_event_type(event.author.id, OfferType.CHOICE)
        tree.remove_offer(offer)

        user = server.get_user(offer.fr)
        user.send_pm(f"{event.author.name} È›i-a acceptat cererea de adopÈ›ie. Nu pot oferi scutecele.") 
        return "SalutÄƒ-È›i pÄƒrinÈ›ii din partea mea!"

    return "ID invalid"

@hook.command(can_pm=True, format="id")
def deny_adoption(bot, text, event):
    """<id> - RefuzÄƒ o ofertÄƒ de adopÈ›ie"""
    for server in bot.backend.get_servers():
        if server.id not in SERVER_IDS:
            continue

        tree = server_trees[str(server.id)]
        offer = tree.get_offer(text)
        if not offer: 
            continue
        if offer.to != event.author.id:
            return "Cererea nu Ã®È›i este destinatÄƒ È›ie!"
        if offer.tp != OfferType.ADOPT:
            return "Asta nu-i cerere de adopÈ›ie!"
        
        user = server.get_user(offer.fr)
        user.send_pm(f"{server.get_user(offer.to).name} È›i-a refuzat cererea de adopÈ›ie. ÃŽncÄƒ n-a crescut suficient :(") 
        return "I-am transmis veÈ™tile."
    
    return "ID invalid"

@hook.command(server_id=SERVER_IDS)
def revoke_marry_request(text, event):
    """DacÄƒ te-ai rÄƒzgÃ¢ndit È™i nu vrei sÄƒ te cÄƒsÄƒtoreÈ™ti."""
    tree = get_server_tree(event)
    # This assumes there's only one outbox marry requests (which should be what's true)
    for offer in tree.offer_outbox(event.author.id):
        if offer.tp != OfferType.MARRY:
            continue
        u = event.server.get_user(offer.to)
        u1 = event.server.get_user(offer.fr)
        u.send_pm(f"Oferta de cÄƒsÄƒtorie de la {u1.name} a fost anulatÄƒ.") 
        tree.remove_offer(offer)
        return "Done"

    return "Nu ai trimis nicio cerere de cÄƒsÄƒtorie."

@hook.command(server_id=SERVER_IDS)
def revoke_adopt_request(text, event):
    """DacÄƒ te-ai rÄƒzgÃ¢ndit È™i nu vrei sÄƒ adoptezi pe cineva."""
    tree = get_server_tree(event)
    for offer in tree.offer_outbox(event.author.id):
        if offer.tp != OfferType.ADOPT:
            continue
        u = event.server.get_user(offer.to)
        u1 = event.server.get_user(offer.fr)
        u.send_pm(f"Oferta de adopÈ›ie de la {u1.name} a fost anulatÄƒ.") 
        tree.remove_offer(offer)
        return "Done"

    return "Nu ai trimis nicio cerere de adopÈ›ie cÄƒtre acea persoanÄƒ."

@hook.command(server_id=SERVER_IDS)
def divorce(event):
    """DivorÈ›eazÄƒ cu partenerul tÄƒu."""
    p = get_server_tree(event).get_person(event.author.id)
    if not p.married:
        return "Nu eÈ™ti cÄƒsÄƒtorit!"
    old_spouse = p.spouse
    user = get_server_tree(event).get_member(p.spouse)
    user.send_pm("Partenerul tÄƒu, %s, a decis sÄƒ divorÈ›eze cu tine. Nu te merita, crede-mÄƒ" % event.author.name)
    return get_server_tree(event).start_divorce_event(p)

@hook.command(server_id=SERVER_IDS, format="parent")
def choose_parent(event, text):
    """<pÄƒrinte> - Alege pÄƒrintele cu care vrei sÄƒ rÄƒmÃ¢i dupÄƒ divorÈ›."""
    text = dutils.str_to_id(text)
    u = event.server.get_user(text)
    if not u:
        return "Nu ai menÈ›ionat utilizator!"
    tree = get_server_tree(event)
    p = tree.get_person(event.author.id)
    if p.adopted:
        return "EÈ™ti deja adoptat, nu poÈ›i alege pe cineva!"

    offers = tree.outbox_by_event_type(event.author.id, OfferType.CHOICE)
    if len(offers) == 0:
        return
    if text not in [offer.to for offer in offers]:
        return "Persoana nu e pÄƒrintele tÄƒu!"
    p1 = tree.get_person(text)
    p1.complete_adoption(p, "child")
    p.complete_adoption(p1, "parent")
    tree.clear_with_event_type(event.author.id, OfferType.CHOICE)
    return "Èši-ai ales un pÄƒrinte, sper cÄƒ veÈ›i continua fericiÈ›i"

@hook.command(server_id=SERVER_IDS)
def leave_parents(event):
    """Nu alege niciun pÄƒrinte cu care sÄƒ rÄƒmÃ¢i. Nu vei mai putea alege un pÄƒrinte dupÄƒ."""
    tree = get_server_tree(event)
    if len(tree.outbox_by_event_type(event.author.id)) == 0:
        return
    tree.clear_with_event_type(event.author.id, EventType.CHOICE)
    return "Èši-ai lÄƒsat pÄƒrinÈ›ii divorÈ›aÈ›i Ã®n urmÄƒ"

@hook.command(server_id=SERVER_IDS)
def disown(text, event):
    """<user> - DezmoÈ™teneÈ™te unul din copii"""
    tree = get_server_tree(event)
    text = dutils.str_to_id(text)
    if text == "":
        return "Trebuie sÄƒ specifici pe cineva sÄƒ dezmoÈ™teneÈ™ti"
    p = tree.get_person(event.author.id)
    if not p.disown(text):
        return "PersoanÄƒ invalidÄƒ"
    c = event.server.get_user(text)
    c.send_pm("PÄƒrinÈ›ii tÄƒi au decis cÄƒ nu meriÈ›i sÄƒ fii copilul lor. EÈ™ti pe cont propriu. :'(")
    if p.spouse:
        user = tree.get_member(p.spouse)
        user.send_pm("Partenerul tÄƒu a decis sÄƒ %s nu meritÄƒ sÄƒ fie copilul vostru." % c.name)
    return "Gata, ai mai scÄƒpat de o grijÄƒ"


@hook.command(server_id=SERVER_IDS)
def run_away(event):
    """Fugi de acasÄƒ. Sunt eliminate toate legÄƒturile cu pÄƒrinÈ›ii tÄƒi."""
    p = get_server_tree(event).get_person(event.author.id)
    if not p.adopted:
        return "Nu eÈ™ti adoptat!"
    old_parents = p.parents
    for parent in old_parents:
        user = get_server_tree(event).get_member(parent)
        user.send_pm("Copilul tÄƒu, %s, a fugit de acasÄƒ. Trebuia sÄƒ-l tratezi mai bine :(" % event.author.name)
    p.cut_parent_ties()
    return "Ai fugit de acasÄƒ"

###########################################################
# INFORMATIVE STUFF #######################################
###########################################################

@hook.command(server_id=SERVER_IDS)
def offer_inbox(event, reply):
    """AfiÈ™eazÄƒ toate cererile disponibile pe care le-ai primit."""
    offers = get_server_tree(event).offer_inbox(event.author.id)
    if len(offers) == 0:
        return "Nu-i nimic"
    ret = ""
    for offer in offers:
        if offer.tp == OfferType.MARRY:
            ret += "Cerere de cÄƒsÄƒtorie de la <@%s>" % offer.fr
        if offer.tp == OfferType.ADOPT:
            ret += "OfertÄƒ de adopÈ›ie de la <@%s>" % offer.fr
        if offer.tp == OfferType.CHOICE:
            ret += "OpÈ›iune de ales pÄƒrinte: <@%s>" % offer.fr
    reply(ret, allowed_mentions=no_mentions)

@hook.command(server_id=SERVER_IDS)
def offer_outbox(event, reply):
    """AfiÈ™eazÄƒ toate cererile disponibile pe care le-ai trimis."""
    offers = get_server_tree(event).offer_outbox(event.author.id)
    if len(offers) == 0:
        return "Nu-i nimic"
    ret = ""
    for offer in offers:
        if offer.tp == OfferType.MARRY:
            ret += "Cerere de cÄƒsÄƒtorie cÄƒtre <@%s>" % offer.to
        if offer.tp == OfferType.ADOPT:
            ret += "OfertÄƒ de adopÈ›ie cÄƒtre <@%s>" % offer.to
        if offer.tp == OfferType.CHOICE:
            ret += "OpÈ›iune de ales pÄƒrinte cÄƒtre <@%s>" % offer.to
    reply(ret, allowed_mentions=no_mentions)


@hook.command(server_id=SERVER_IDS)
def bug_report(text):
    """<text> - raporteazÄƒ un bug cÄƒtre cel care se ocupÄƒ cu aceastÄƒ funcÈ›ionalitate a botului."""
    return f"<@{PLUGIN_MAINTAINER}>"


@hook.command(server_id=SERVER_IDS)
def family_info():
    """InformaÈ›ii generale despre comenzile legate de familie"""
    return """
Bine aÈ›i venit la sistemul de familii r/Romania!
Aici, aveÈ›i ocazia sÄƒ stabiliÈ›i numeroase relaÈ›ii ficÈ›ionale cu alÈ›i membri ai server-ului: puteÈ›i sÄƒ vÄƒ cÄƒsÄƒtoriÈ›i, sÄƒ adoptaÈ›i, sÄƒ fiÈ›i adoptat, sÄƒ divorÈ›aÈ›i, etc.

PuteÈ›i Ã®ncepe cÄƒsÄƒtorind pe cineva cu `.marry`. Botul va trimite Ã®n DM-uri un cod unic pentru ofertÄƒ. PotenÈ›ialul partener poate sÄƒ accepte sau sÄƒ refuze oferta! 
AsemÄƒnÄƒtor, puteÈ›i adopta pe cineva cu `.adopt`, de menÈ›ionat cÄƒ poÈ›i Ã®ncerca sÄƒ adopÈ›i o singurÄƒ persoanÄƒ Ã®ntr-un moment.

OdatÄƒ ce stabiliÈ›i cÃ¢teva relaÈ›ii, puteÈ›i rula `.family_tree` pentru a vedea arborele vostru genealogic. PuteÈ›i vedea È™i arborele altuia menÈ›ionÃ¢ndu-l cÃ¢nd executaÈ›i comanda.

Comanda `.family_support` vÄƒ oferÄƒ o listÄƒ Ã®ntreagÄƒ de comenzi rulabile, bazat pe relaÈ›iile stabilite. `.family_support full` le afiÈ™eazÄƒ pe toate indiferent de relaÈ›ii, dacÄƒ sunteÈ›i curioÈ™i ðŸ˜„

CÃ¢nd divorÈ›ezi, copiii primesc È™ansa sÄƒ rÄƒmÃ¢nÄƒ cu un pÄƒrinte, nu trebuie readoptaÈ›i! DacÄƒ ei sunt adoptaÈ›i de altcineva Ã®ntre timp, nu se mai pot Ã®ntoarce la voi.


Sistemul nu este perfect, dacÄƒ gÄƒsiÈ›i un bug nu ezitaÈ›i sÄƒ rulaÈ›i comanda `.bug_report` cu problema, iar autorul sistemului va Ã®ncerca sÄƒ o rezolve cÃ¢t mai rapid.
Spor!
""".strip()

@hook.command(server_id=SERVER_IDS)
def family_support(event, text):
    """AfiÈ™eazÄƒ toate comenzile pe care le poate face cineva. Lista se poate schimba dupÄƒ mulÈ›i factori. `.family_support full` dezactiveazÄƒ dinamicitatea """
    p = get_server_tree(event).get_person(event.author.id)
    ret = "Comenzi disponibile:\n```\n"
    show_full = text == "full"
    funcs = [family_info, family_tree]
    empty_line = gen_func("")
    
    funcs.append(empty_line)
    if p.married or show_full:
        funcs.append(divorce)
    
    if not p.married or show_full:
        funcs.append(marry)
    if not p.adopt_request or show_full:
        funcs.append(adopt)
    
    if p.marry_request or show_full:
        funcs.append(revoke_marry_request)
    if p.adopt_request or show_full:
        funcs.append(revoke_adopt_request)

    if len(p.children) > 0 or show_full:
        funcs.append(disown)

    if p.divorced_child or show_full:
        funcs.append(empty_line)
        funcs.extend([choose_parent, leave_parents])
        funcs.append(empty_line)

    if p.adopted or show_full:
        funcs.append(run_away)

    funcs.extend([empty_line, offer_inbox, offer_outbox, empty_line])

    funcs.extend([bug_report, family_support])

    if event.author.bot_owner:
         funcs.extend([gen_func("\n### Comenzi nedestinate publicului"), raw_relationships, get_person_info, get_requests, clear_requests, clear_relationships])
         
    for func in funcs:
        if "__custom__" in dir(func):
            ret += "%s\n" % func.__doc__
            continue
        name = func.__name__
        doc = func.__doc__
        if not doc:
            doc = "#TODO - documentaÈ›ie"
        ret += ".%s - %s\n" % (name, doc.strip())
    return ret + "```"

# Generates a function made to fit nicely in the help command
def gen_func(doc):
    def tmp():
        pass
    tmp.__doc__ = doc
    tmp.__custom__ = True
    return tmp

@hook.command(server_id=SERVER_IDS)
def family_tree(event, text):
    """<user> - AfiÈ™eazÄƒ arborele genealogic al unei persoane. DacÄƒ nu este menÈ›ionat cineva, va afiÈ™a arborele tÄƒu genealogic"""
    pid = event.author.id
    text = dutils.str_to_id(text)
    if text != "":
        pid = text
    try:
        user = get_server_tree(event).get_person(pid)
    except:
        return "PersoanÄƒ invalidÄƒ"
    if user.alone:
        return "Nu-i nicio familie de arÄƒtat. :("
    try:
        return dutils.pil_to_dfile(user.family_tree()) 
    except:
        import traceback
        bio = io.StringIO()
        traceback.print_exc(file=bio)
        return "```"+bio.getvalue()+"```"

###########################################################
# MAINTAINING STUFF #######################################
###########################################################

@hook.command(server_id=SERVER_IDS, permissions=Permission.bot_owner)
def raw_relationships(event, text, async_send_message):
    """<user> - AfiÈ™eazÄƒ toate rudele unei persoane, pe cÃ¢te un nivel al arborelui genealogic"""
    pid = event.author.id
    text = dutils.str_to_id(text)
    if text != "":
        pid = text
    try:
        p = get_server_tree(event).get_person(pid)
    except:
        return "PersoanÄƒ invalidÄƒ"
    return str(p.get_relative_levels())

@hook.command(server_id=SERVER_IDS, permissions=Permission.bot_owner)
def get_person_info(event, reply, text):
    """<user> - AfiÈ™eazÄƒ informaÈ›ii despre persoana respectivÄƒ"""
    pid = event.author.id
    text = dutils.str_to_id(text)
    if text != "":
        pid = text
    msg = ""
    try:
        p = get_server_tree(event).get_person(pid)
    except:
        return "PersoanÄƒ invalidÄƒ"
    msg += f"id: {p.id}\n"
    msg += f"name: {p.name}\n"
    msg += f"married? {p.married}\n"
    msg += f"marry request? {p.marry_request}\n"
    if p.spouse:
        msg += f"married to: <@{p.spouse.id}>\n"
    if p.children:
        msg += f"children: {','.join([f'<@{c.id}>' for c in p.children])}\n"
    if p.parents:
        msg += f"parents: {','.join([f'<@{pr.id}>' for pr in p.parents])}\n"
    reply(msg, allowed_mentions=no_mentions)

@hook.command(server_id=SERVER_IDS, permissions=Permission.bot_owner)
def get_requests(event, reply):
    """AfiÈ™eazÄƒ toate cererile"""
    msg = ""
    for i in get_server_tree(event).pending_offers:
        msg += str(i) + "\n"
    reply(msg, allowed_mentions=no_mentions)

@hook.command(server_id=SERVER_IDS, permissions=Permission.bot_owner)
def clear_requests(event):
    """GoleÈ™te toate cererile. Nu este indicat sÄƒ rulezi comanda Ã®n niciun caz"""
    tree = get_server_tree(event)
    tree.pending_offers = [] 
    tree.sync()
    return "Done."

@hook.command(server_id=SERVER_IDS, permissions=Permission.bot_owner)
def clear_relationships(event):
    """GoleÈ™te toate relaÈ›iile. DacÄƒ se stricÄƒ prea rÄƒu arborele"""
    try:
        tree = get_server_tree(event)
        tree.people = {}
        tree.sync()
    except:
        import traceback
        bio = io.StringIO()
        traceback.print_exc(file=bio)
        return "```"+bio.getvalue()+"```"
    return "Done."

#############################################
# INITIALIZING STUFF ########################
#############################################

@hook.on_ready()
def load_from_storage(bot):
    for server in bot.backend.get_servers():
        if str(server.id) not in SERVER_IDS:
            continue

        storage = bot.server_permissions[server.id].get_plugin_storage(PLUGIN_DATA_NAME)

        if storage == {}:
            # Set initial stuff
            storage["server_tree"] = {"offers": [], "people": {}}
            storage.sync()
        
        ServerTree.deserialize(bot, storage, server)
